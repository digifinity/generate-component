* React Component Generator
  [[https://travis-ci.org/tpoulsen/generate-component][https://travis-ci.org/tpoulsen/generate-component.svg?branch=master]]

** Installation
   You should have [[https://www.haskell.org/ghc/][GHC]] and [[https://www.haskell.org/cabal/][cabal]] or [[https://docs.haskellstack.org/en/stable/README/][stack]] installed.

   Installing `generate-component` is easiest with stack:
   #+BEGIN_SRC sh
   stack install
   #+END_SRC

   This compiles the program and puts the executable in ~/.local/bin~. If this is in your path, you now have the command `generate-component`.

** Usage
   #+BEGIN_SRC sh
     stack install
     # ... Output omitted for brevity ... #
     Copied executables to $HOME/.local/bin:
     - generate-component

     generate-component -h
     Flexible generator for React/React-Native components

     Usage: generate-component COMMAND
     Generate React/React-Native components

     Available options:
     -h,--help                Show this help text

     Available commands:
     init                     Create a config file
     gen                      Generate a component
   #+END_SRC

** Commands
   ~generate-component~ has two subcommands:
     + ~init~
     + ~gen~
*** ~init~
    Initializes ~generate-component~ with a config file in the current directory. The config file specifies defaults such as project type, default component directory, and the default type of components to generate.
*** ~gen~
    Generates a component:
    #+BEGIN_SRC sh
      generate-component gen -h

      Usage: generate-component gen NAME [-d|--component-directory DIR]
                                    [-r|--redux-container] [-n|--react-native]
                                    [-t|--component-type ARG]
        Generate a component

    #+END_SRC
    Command line arguments supersede config file settings.

*** Generating a React component:
   #+BEGIN_SRC sh
     ~/.local/bin/generate-component Test
     Making directory at: ./app/components/Test
     Copying files...
     Writing ./app/components/Test/Test.js...
     Writing ./app/components/Test/styles.js...
     Writing ./app/components/Test/index.js...
     Done
   #+END_SRC

*** Generating a React component in an arbitrary directory:
   #+BEGIN_SRC sh
     ~/.local/bin/generate-component -d dir Test
     Making directory at: dir/Test
     Copying files...
     Writing dir/Test/Test.js...
     Writing dir/Test/index.js...
     Done
   #+END_SRC

*** Generating a React Native component:
   #+BEGIN_SRC sh
     ~/.local/bin/generate-component -n Test
     Making directory at: ./app/components/Test
     Copying files...
     Writing ./app/components/Test/Test.js...
     Writing ./app/components/Test/styles.js...
     Writing ./app/components/Test/index.js...
     Done
   #+END_SRC

*** Generating a component with a Redux container (works for React and React Native components):
   #+BEGIN_SRC sh
     ~/.local/bin/generate-component -c Test
     Making directory at: ./app/components/Test
     Copying files...
     Writing ./app/components/Test/TestContainer.js...
     Writing ./app/components/Test/Test.js...
     Writing ./app/components/Test/styles.js...
     Writing ./app/components/Test/index.js...
     Done
   #+END_SRC

*** Attempting to generate a component that already exists:
   #+BEGIN_SRC sh
     ~/.local/bin/generate-component Test
     Component directory exists; exiting without action.
     Done
   #+END_SRC
*** Note
   - DIR: an optional directory under which to create the component; defaults to ~./app/components/~
   - ~-r~: a flag that, if present, additionally generates a redux container component
** Testing
*** To run the tests:
    #+BEGIN_SRC sh
    stack test
    #+END_SRC
